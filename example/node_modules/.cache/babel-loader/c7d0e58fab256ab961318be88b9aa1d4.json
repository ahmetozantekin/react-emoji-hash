{"ast":null,"code":"import { useState } from 'react';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar useHashEmoji = function useHashEmoji(str) {\n  var _useState = useState(str),\n      _useState2 = _slicedToArray(_useState, 1),\n      strState = _useState2[0];\n\n  return console.log(hashCode({\n    strState: strState\n  }));\n};\n\nvar hashCode = function hashCode(str) {\n  console.log(str); // if (Array.prototype.reduce){\n  //     return str.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \n  // } \n  // var hash = 0;\n  // if (str.length === 0) return hash;\n  // for (var i = 0; i < str.length; i++) {\n  //     var character  = str.charCodeAt(i);\n  //     hash  = ((hash<<5)-hash)+character;\n  //     hash = hash & hash; // Convert to 32bit integer\n  // }\n  // return hash;\n};\n\nexport { useHashEmoji };","map":{"version":3,"sources":["../src/index.js"],"names":["useHashEmoji","strState","useState","hashCode","console"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGaA,YAAY,GAAG,SAAfA,YAAe,CAAA,GAAA,EAAS;AAAA,MAAA,SAAA,GAClBE,QAAQ,CADU,GACV,CADU;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC9BD,QAD8B,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEnC,SAAO,OAAO,CAAP,GAAA,CAAaE,QAAQ,CAAC;AAACF,IAAAA,QAAQ,EAARA;AAAD,GAAD,CAArB,CAAP;AACD,C;;AAED,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAA,GAAA,EAAa;AAC5BC,EAAAA,OAAO,CAAPA,GAAAA,CAD4B,GAC5BA,EAD4B,CAAA;AAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZF,CAAA","sourcesContent":["import React, { useState } from 'react'\n//import emojis from './emojis.json'\n \nexport const useHashEmoji = (str) => {\n  let [strState] = useState(str);\n  return console.log( hashCode({strState}) )\n}\n\nconst hashCode = function(str){\n  console.log(str)\n  // if (Array.prototype.reduce){\n  //     return str.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \n  // } \n  // var hash = 0;\n  // if (str.length === 0) return hash;\n  // for (var i = 0; i < str.length; i++) {\n  //     var character  = str.charCodeAt(i);\n  //     hash  = ((hash<<5)-hash)+character;\n  //     hash = hash & hash; // Convert to 32bit integer\n  // }\n  // return hash;\n}"]},"metadata":{},"sourceType":"module"}