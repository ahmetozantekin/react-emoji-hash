{"ast":null,"code":"import { useState } from 'react';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar Elist = require('./emojis.json');\n\nvar useHashEmoji = function useHashEmoji(str) {\n  var _useState = useState(str),\n      _useState2 = _slicedToArray(_useState, 1),\n      strState = _useState2[0];\n\n  var hashedString = hashCode(strState);\n  return convertToEmoji(hashedString);\n};\n\nvar hashCode = function hashCode(str) {\n  if (Array.prototype.reduce) {\n    return str.split(\"\").reduce(function (a, b) {\n      a = (a << 5) - a + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n  }\n\n  var hash = 0;\n  if (str.length === 0) return hash;\n\n  for (var i = 0; i < str.length; i++) {\n    var character = str.charCodeAt(i);\n    hash = (hash << 5) - hash + character;\n    hash = hash & hash; //Convert to 32bit integer\n  }\n\n  return hash;\n};\n\nvar convertToEmoji = function convertToEmoji(hStr) {\n  console.log(hStr);\n};\n\nexport { useHashEmoji };","map":{"version":3,"sources":["../src/index.js"],"names":["Elist","require","useHashEmoji","strState","useState","hashedString","hashCode","convertToEmoji","Array","a","b","hash","str","i","character","console"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAnB,eAAmB,CAAnB;;IAEaC,YAAY,GAAG,SAAfA,YAAe,CAAA,GAAA,EAAS;AAAA,MAAA,SAAA,GAClBE,QAAQ,CADU,GACV,CADU;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC9BD,QAD8B,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEnC,MAAIE,YAAY,GAAGC,QAAQ,CAA3B,QAA2B,CAA3B;AACA,SAAOC,cAAc,CAArB,YAAqB,CAArB;AAGD,C;;AAED,IAAMD,QAAQ,GAAG,SAAXA,QAAW,CAAA,GAAA,EAAS;AACxB,MAAIE,KAAK,CAALA,SAAAA,CAAJ,MAAA,EAA2B;AACvB,WAAO,GAAG,CAAH,KAAA,CAAA,EAAA,EAAA,MAAA,CAAqB,UAAA,CAAA,EAAA,CAAA,EAAa;AAACC,MAAAA,CAAC,GAAE,CAACA,CAAC,IAAF,CAAA,IAAD,CAAC,GAAUC,CAAC,CAADA,UAAAA,CAAbD,CAAaC,CAAbD;AAA6B,aAAOA,CAAC,GAAR,CAAA;AAAhE,KAAA,EAAP,CAAO,CAAP;AACH;;AACD,MAAIE,IAAI,GAAR,CAAA;AACA,MAAIC,GAAG,CAAHA,MAAAA,KAAJ,CAAA,EAAsB,OAAA,IAAA;;AACtB,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,GAAG,CAAvB,MAAA,EAAgCC,CAAhC,EAAA,EAAqC;AACjC,QAAIC,SAAS,GAAIF,GAAG,CAAHA,UAAAA,CAAjB,CAAiBA,CAAjB;AACAD,IAAAA,IAAI,GAAK,CAACA,IAAI,IAAL,CAAA,IAAD,IAAC,GAATA,SAAAA;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAHsB,IAGjCA,CAHiC,CAAA;AAIpC;;AACD,SAAA,IAAA;AAXF,CAAA;;AAcA,IAAMJ,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAU;AAC/BQ,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,IAAAA;AADF,CAAA","sourcesContent":["import React, { useState } from 'react'\n// import Elist from './emojis.json'\nvar Elist = require('./emojis.json');\n\nexport const useHashEmoji = (str) => {\n  let [strState] = useState(str);\n  var hashedString = hashCode(strState);\n  return convertToEmoji(hashedString);\n\n  \n}\n\nconst hashCode = (str) => {\n  if (Array.prototype.reduce){\n      return str.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \n  } \n  var hash = 0;\n  if (str.length === 0) return hash;\n  for (var i = 0; i < str.length; i++) {\n      var character  = str.charCodeAt(i);\n      hash  = ((hash<<5)-hash)+character;\n      hash = hash & hash; //Convert to 32bit integer\n  }\n  return hash;\n}\n\nconst convertToEmoji = (hStr) => {\n  console.log(hStr);\n  \n}"]},"metadata":{},"sourceType":"module"}